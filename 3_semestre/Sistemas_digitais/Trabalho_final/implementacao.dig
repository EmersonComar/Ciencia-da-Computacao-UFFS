<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>2</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>blackjack</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,rst,start,hit_btn,stay_btn,random_cards,cards:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity blackjack is
    Port ( 
        clk         : in  STD_LOGIC;
        rst         : in  STD_LOGIC;
        start       : in  STD_LOGIC;
        hit_btn     : in  STD_LOGIC;
        stay_btn    : in  STD_LOGIC;
        random_cards: in  STD_LOGIC;  
        cards       : in  STD_LOGIC_VECTOR(3 downto 0);
        
        win_out     : out STD_LOGIC;
        lose_out    : out STD_LOGIC;
        tie_out     : out STD_LOGIC;
        card_display: out STD_LOGIC_VECTOR(3 downto 0);
        sum_display : out STD_LOGIC_VECTOR(7 downto 0);

        soma_user_display   : out STD_LOGIC_VECTOR(7 downto 0);
        soma_dealer_display : out STD_LOGIC_VECTOR(7 downto 0);

        INICIO : out STD_LOGIC;
        CARTA_USER_1 : out STD_LOGIC;
        CARTA_USER_2 : out STD_LOGIC;
        ESPERAR_USER: out STD_LOGIC;
        HIT : out STD_LOGIC;
        STAY : out STD_LOGIC;
        CARTA_1_DEALER : out STD_LOGIC;
        CARTA_2_DEALER : out STD_LOGIC;
        NOVA_CARTA_DEALER : out STD_LOGIC;
        COMPARAR_CARTAS : out STD_LOGIC;
        USER_GANHOU : out STD_LOGIC;
        USER_PERDEU : out STD_LOGIC;
        TIE : out STD_LOGIC
    );
end blackjack;

architecture Behavioral of blackjack is
    type state_type is (
        STATE_INICIO,
        STATE_CARTA_USER_1, 
        STATE_CARTA_USER_2, 
        STATE_ESPERAR_USER,
        STATE_HIT,
        STATE_STAY,
        STATE_CARTA_1_DEALER, 
        STATE_CARTA_2_DEALER,
        STATE_NOVA_CARTA_DEALER, 
        STATE_COMPARAR_CARTAS,
        STATE_USER_GANHOU, 
        STATE_USER_PERDEU, 
        STATE_TIE
    );
    
    signal current_state, next_state : state_type;
    signal soma_user    : unsigned(7 downto 0) := (others =&gt; &apos;0&apos;);
    signal soma_dealer  : unsigned(7 downto 0) := (others =&gt; &apos;0&apos;);
    signal carta_atual  : unsigned(3 downto 0);
    signal ases_user    : unsigned(3 downto 0) := (others =&gt; &apos;0&apos;);
    signal ases_dealer  : unsigned(3 downto 0) := (others =&gt; &apos;0&apos;);
    
    function get_card_value(card: unsigned; current_sum: unsigned; num_aces: unsigned) return unsigned is
        variable card_value: unsigned(7 downto 0);
    begin
        if card = 1 then
            if current_sum &lt;= 10 then
                card_value := to_unsigned(11, 8);
            else
                card_value := to_unsigned(1, 8);
            end if;
        elsif card &gt;= 10 and card &lt;= 13 then
            card_value := to_unsigned(10, 8);
        elsif card &gt; 13 then
            card_value := to_unsigned(0, 8);
        else
            card_value := resize(card, 8);
        end if;
        return card_value;
    end function;
    
    function adjust_aces(sum: unsigned; num_aces: unsigned) return unsigned is
        variable adjusted_sum: unsigned(7 downto 0);
    begin
        adjusted_sum := sum;
        for i in 0 to to_integer(num_aces)-1 loop
            if adjusted_sum &gt; 21 then
                adjusted_sum := adjusted_sum - 10;
            end if;
        end loop;
        return adjusted_sum;
    end function;
    
begin
    -- Processo combinacional para atualizar displays
    process(current_state, carta_atual, soma_dealer, soma_user)
    begin
        -- Atualização imediata dos displays
        card_display &lt;= std_logic_vector(carta_atual);
        if current_state = STATE_CARTA_1_DEALER or 
           current_state = STATE_CARTA_2_DEALER or 
           current_state = STATE_NOVA_CARTA_DEALER then
            sum_display &lt;= std_logic_vector(soma_dealer);
        else
            sum_display &lt;= std_logic_vector(soma_user);
        end if;
    end process;

    -- Debug displays soma dos jogadores
    process(current_state)
    begin
        soma_user_display   &lt;= std_logic_vector(soma_user);
        soma_dealer_display &lt;= std_logic_vector(soma_dealer);
    end process;

    -- Processo de registrador de estado
    process(clk, rst)
    begin
        if rst = &apos;1&apos; then
            current_state &lt;= STATE_INICIO;
            soma_user &lt;= (others =&gt; &apos;0&apos;);
            soma_dealer &lt;= (others =&gt; &apos;0&apos;);
            ases_user &lt;= (others =&gt; &apos;0&apos;);
            ases_dealer &lt;= (others =&gt; &apos;0&apos;);
        elsif rising_edge(clk) then
            current_state &lt;= next_state;
            
            -- Atualização das somas e contagem de ases
            case current_state is
                when STATE_INICIO =&gt;
                    soma_user &lt;= (others =&gt; &apos;0&apos;);
                    soma_dealer &lt;= (others =&gt; &apos;0&apos;);
                    ases_user &lt;= (others =&gt; &apos;0&apos;);
                    ases_dealer &lt;= (others =&gt; &apos;0&apos;);
                    
                when STATE_CARTA_USER_1 | STATE_CARTA_USER_2 | STATE_HIT =&gt;
                    if carta_atual = 1 then
                        ases_user &lt;= ases_user + 1;
                    end if;
                    soma_user &lt;= adjust_aces(soma_user + get_card_value(carta_atual, soma_user, ases_user), ases_user);
                    
                when STATE_CARTA_1_DEALER | STATE_CARTA_2_DEALER | STATE_NOVA_CARTA_DEALER =&gt;
                    if carta_atual = 1 then
                        ases_dealer &lt;= ases_dealer + 1;
                    end if;
                    soma_dealer &lt;= adjust_aces(soma_dealer + get_card_value(carta_atual, soma_dealer, ases_dealer), ases_dealer);
                    
                when others =&gt;
                    null;
            end case;
        end if;
    end process;
    
    process(current_state, start, hit_btn, stay_btn, random_cards, cards, soma_user, soma_dealer)
    begin
        -- Valores padrão
        next_state &lt;= current_state;
        win_out &lt;= &apos;0&apos;;
        lose_out &lt;= &apos;0&apos;;
        tie_out &lt;= &apos;0&apos;;
        
        -- Atualização da carta atual baseada no estado
        if random_cards = &apos;1&apos; then
            case current_state is
                when STATE_CARTA_USER_1 =&gt; carta_atual &lt;= &quot;0001&quot;;
                when STATE_CARTA_USER_2 =&gt; carta_atual &lt;= &quot;0010&quot;;
                when STATE_HIT =&gt; carta_atual &lt;= &quot;0011&quot;;
                when STATE_CARTA_1_DEALER =&gt; carta_atual &lt;= &quot;0100&quot;;
                when STATE_CARTA_2_DEALER =&gt; carta_atual &lt;= &quot;0101&quot;;
                when STATE_NOVA_CARTA_DEALER =&gt; carta_atual &lt;= &quot;0110&quot;;
                when others =&gt; carta_atual &lt;= &quot;0000&quot;;
            end case;
        else
            carta_atual &lt;= unsigned(cards);
        end if;
        
        case current_state is
            when STATE_INICIO =&gt;
                if start = &apos;1&apos; then
                    next_state &lt;= STATE_CARTA_USER_1;
                end if;
                
            when STATE_CARTA_USER_1 =&gt;
                next_state &lt;= STATE_CARTA_USER_2;
                
            when STATE_CARTA_USER_2 =&gt;
                    next_state &lt;= STATE_ESPERAR_USER;
                
            when STATE_ESPERAR_USER =&gt;
                if hit_btn = &apos;1&apos; then
                    next_state &lt;= STATE_HIT;
                elsif stay_btn = &apos;1&apos; then
                    next_state &lt;= STATE_STAY;
                end if;
                if soma_user = 21 then
                    next_state &lt;= STATE_USER_GANHOU;
                elsif soma_user &gt; 21 then
                    next_state &lt;= STATE_USER_PERDEU;
                end if;
                
            when STATE_HIT =&gt;
                    next_state &lt;= STATE_ESPERAR_USER;
                
            when STATE_STAY =&gt;
                next_state &lt;= STATE_CARTA_1_DEALER;
                
            when STATE_CARTA_1_DEALER =&gt;
                next_state &lt;= STATE_CARTA_2_DEALER;
                
            when STATE_CARTA_2_DEALER =&gt;
                if soma_dealer &gt;= 17 then
                    next_state &lt;= STATE_COMPARAR_CARTAS;
                else
                    next_state &lt;= STATE_NOVA_CARTA_DEALER;
                end if;
                
            when STATE_NOVA_CARTA_DEALER =&gt;
                if soma_dealer &gt;= 17 then
                    next_state &lt;= STATE_COMPARAR_CARTAS;
                else
                    -- Se a soma ainda não atingiu 17, continua sacando cartas
                    next_state &lt;= STATE_NOVA_CARTA_DEALER;
                end if;
                
            when STATE_COMPARAR_CARTAS =&gt;
                if soma_dealer &gt; 21 then
                    next_state &lt;= STATE_USER_GANHOU;
                elsif soma_user = soma_dealer then
                    next_state &lt;= STATE_TIE;
                elsif soma_user &gt; soma_dealer then
                    next_state &lt;= STATE_USER_GANHOU;
                else
                    next_state &lt;= STATE_USER_PERDEU;
                end if;
                
            when STATE_USER_GANHOU =&gt;
                win_out &lt;= &apos;1&apos;;
                if start = &apos;1&apos; then
                    next_state &lt;= STATE_INICIO;
                end if;
                
            when STATE_USER_PERDEU =&gt;
                lose_out &lt;= &apos;1&apos;;
                if start = &apos;1&apos; then
                    next_state &lt;= STATE_INICIO;
                end if;
                
            when STATE_TIE =&gt;
                tie_out &lt;= &apos;1&apos;;
                if start = &apos;1&apos; then
                    next_state &lt;= STATE_INICIO;
                end if;
        end case;
    end process;

    -- Processo para localizar o estado atual
    process(current_state)
    begin
        -- Desativar todas as saídas inicialmente
        INICIO &lt;= &apos;0&apos;;
        CARTA_USER_1 &lt;= &apos;0&apos;;
        CARTA_USER_2 &lt;= &apos;0&apos;;
        ESPERAR_USER &lt;= &apos;0&apos;;
        HIT &lt;= &apos;0&apos;;
        STAY &lt;= &apos;0&apos;;
        CARTA_1_DEALER &lt;= &apos;0&apos;;
        CARTA_2_DEALER &lt;= &apos;0&apos;;
        NOVA_CARTA_DEALER &lt;= &apos;0&apos;;
        COMPARAR_CARTAS &lt;= &apos;0&apos;;
        USER_GANHOU &lt;= &apos;0&apos;;
        USER_PERDEU &lt;= &apos;0&apos;;
        TIE &lt;= &apos;0&apos;;

        case current_state is
            when STATE_INICIO =&gt;
                INICIO &lt;= &apos;1&apos;;
            when STATE_CARTA_USER_1 =&gt;
                CARTA_USER_1 &lt;= &apos;1&apos;;
            when STATE_CARTA_USER_2 =&gt;
                CARTA_USER_2 &lt;= &apos;1&apos;;
            when STATE_ESPERAR_USER =&gt;
                ESPERAR_USER &lt;= &apos;1&apos;;
            when STATE_HIT =&gt;
                HIT &lt;= &apos;1&apos;;
            when STATE_STAY =&gt;
                STAY &lt;= &apos;1&apos;;
            when STATE_CARTA_1_DEALER =&gt;
                CARTA_1_DEALER &lt;= &apos;1&apos;;
            when STATE_CARTA_2_DEALER =&gt;
                CARTA_2_DEALER &lt;= &apos;1&apos;;
            when STATE_NOVA_CARTA_DEALER =&gt;
                NOVA_CARTA_DEALER &lt;= &apos;1&apos;;
            when STATE_COMPARAR_CARTAS =&gt;
                COMPARAR_CARTAS &lt;= &apos;1&apos;;
            when STATE_USER_GANHOU =&gt;
                USER_GANHOU &lt;= &apos;1&apos;;
            when STATE_USER_PERDEU =&gt;
                USER_PERDEU &lt;= &apos;1&apos;;
            when STATE_TIE =&gt;
                TIE &lt;= &apos;1&apos;;
            when others =&gt;
                null;
        end case;
    end process;

end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>win_out,lose_out,tie_out,card_display:4,sum_display:8,soma_user_display:8,soma_dealer_display:8,INICIO,CARTA_USER_1,CARTA_USER_2,ESPERAR_USER,HIT,STAY,CARTA_1_DEALER,CARTA_2_DEALER,NOVA_CARTA_DEALER,COMPARAR_CARTAS,USER_GANHOU,USER_PERDEU,TIE</string>
        </entry>
      </elementAttributes>
      <pos x="580" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>Clock</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>clk</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>rst</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>start</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>hit</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>stay</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>random</string>
        </entry>
      </elementAttributes>
      <pos x="400" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>cards</string>
        </entry>
        <entry>
          <string>Bits</string>
          <int>4</int>
        </entry>
      </elementAttributes>
      <pos x="400" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>102</red>
            <green>255</green>
            <blue>0</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>Label</string>
          <string>WIN-OUT</string>
        </entry>
      </elementAttributes>
      <pos x="1000" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>LOSE-OUT</string>
        </entry>
      </elementAttributes>
      <pos x="1000" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>255</red>
            <green>255</green>
            <blue>51</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
        <entry>
          <string>Label</string>
          <string>TIE-OUT</string>
        </entry>
      </elementAttributes>
      <pos x="1000" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>INICIO</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CARTA-USER-1</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CARTA-USER-2</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>ESPERAR-USER</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>HIT</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>STAY</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CARTA-1-DEALER</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="680"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>CARTA-2-DEALER</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="720"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>NOVA-CARTA-DEALER</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="760"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>COMPARAR-CARTAS</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="800"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>USER-GANHOU</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="840"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>USER-PERDEU</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>TIE</string>
        </entry>
      </elementAttributes>
      <pos x="1380" y="920"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>BCD_to_7Segment</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>BCD:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Entidade do decodificador
entity BCD_to_7Segment is
    Port (
        BCD : in STD_LOGIC_VECTOR(3 downto 0); -- Entrada BCD de 4 bits
        a, b, c, d, e, f, g, p : out STD_LOGIC -- Saídas individuais para cada segmento
    );
end BCD_to_7Segment;

-- Arquitetura do decodificador
architecture Behavioral of BCD_to_7Segment is
begin
    -- Decodificação dos segmentos com base na entrada BCD
    process(BCD)
    begin
        case BCD is
            when &quot;0000&quot; =&gt; -- 0
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a &lt;= &apos;0&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;0&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;0&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a &lt;= &apos;0&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;0&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a &lt;= &apos;1&apos;; b &lt;= &apos;0&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a &lt;= &apos;1&apos;; b &lt;= &apos;0&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;0&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;1010&quot; =&gt; -- 10 (A)
                a &lt;= &apos;1&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;0&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;1011&quot; =&gt; -- 11 (b)
                a &lt;= &apos;0&apos;; b &lt;= &apos;0&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;1&apos;;
            when &quot;1100&quot; =&gt; -- 12 (C)
                a &lt;= &apos;1&apos;; b &lt;= &apos;0&apos;; c &lt;= &apos;0&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;1&apos;; g &lt;= &apos;0&apos;;
            when &quot;1101&quot; =&gt; -- 13 (d)
                a &lt;= &apos;0&apos;; b &lt;= &apos;1&apos;; c &lt;= &apos;1&apos;; d &lt;= &apos;1&apos;; e &lt;= &apos;1&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a &lt;= &apos;0&apos;; b &lt;= &apos;0&apos;; c &lt;= &apos;0&apos;; d &lt;= &apos;0&apos;; e &lt;= &apos;0&apos;; f &lt;= &apos;0&apos;; g &lt;= &apos;0&apos;;
        end case;
    end process;
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>a,b,c,d,e,f,g,p</string>
        </entry>
      </elementAttributes>
      <pos x="780" y="880"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1240" y="1040"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Display_Controller</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>sum_display:8</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Display_Controller is
    Port (
        sum_display : in STD_LOGIC_VECTOR(7 downto 0);
        -- Saídas para o primeiro display (unidades)
        a1, b1, c1, d1, e1, f1, g1, p1 : out STD_LOGIC;
        -- Saídas para o segundo display (dezenas)
        a2, b2, c2, d2, e2, f2, g2, p2 : out STD_LOGIC
    );
end Display_Controller;

architecture Behavioral of Display_Controller is
    -- Sinais intermediários para armazenar valores decimais
    signal binary_value : integer range 0 to 255;
    signal tens, ones : integer range 0 to 9;
    signal tens_bcd, ones_bcd : STD_LOGIC_VECTOR(3 downto 0);

begin
    -- Converte o valor binário para inteiro
    binary_value &lt;= to_integer(unsigned(sum_display));
    
    -- Calcula dezenas e unidades
    tens &lt;= binary_value / 10;
    ones &lt;= binary_value mod 10;
    
    -- Converte os valores para BCD
    tens_bcd &lt;= std_logic_vector(to_unsigned(tens, 4));
    ones_bcd &lt;= std_logic_vector(to_unsigned(ones, 4));
    
    -- Processo para decodificar o dígito das unidades
    process(ones_bcd)
    begin
        case ones_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
        end case;
    end process;
    
    -- Processo para decodificar o dígito das dezenas
    process(tens_bcd)
    begin
        case tens_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
        end case;
    end process;
    
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>a1,b1,c1,d1,e1,f1,g1,p1,a2,b2,c2,d2,e2,f2,g2,p2</string>
        </entry>
      </elementAttributes>
      <pos x="60" y="960"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="600" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="700" y="1080"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Display_Controller</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>sum_display:8</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Display_Controller is
    Port (
        sum_display : in STD_LOGIC_VECTOR(7 downto 0);
        -- Saídas para o primeiro display (unidades)
        a1, b1, c1, d1, e1, f1, g1, p1 : out STD_LOGIC;
        -- Saídas para o segundo display (dezenas)
        a2, b2, c2, d2, e2, f2, g2, p2 : out STD_LOGIC
    );
end Display_Controller;

architecture Behavioral of Display_Controller is
    -- Sinais intermediários para armazenar valores decimais
    signal binary_value : integer range 0 to 255;
    signal tens, ones : integer range 0 to 9;
    signal tens_bcd, ones_bcd : STD_LOGIC_VECTOR(3 downto 0);

begin
    -- Converte o valor binário para inteiro
    binary_value &lt;= to_integer(unsigned(sum_display));
    
    -- Calcula dezenas e unidades
    tens &lt;= binary_value / 10;
    ones &lt;= binary_value mod 10;
    
    -- Converte os valores para BCD
    tens_bcd &lt;= std_logic_vector(to_unsigned(tens, 4));
    ones_bcd &lt;= std_logic_vector(to_unsigned(ones, 4));
    
    -- Processo para decodificar o dígito das unidades
    process(ones_bcd)
    begin
        case ones_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
        end case;
    end process;
    
    -- Processo para decodificar o dígito das dezenas
    process(tens_bcd)
    begin
        case tens_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
        end case;
    end process;
    
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>a1,b1,c1,d1,e1,f1,g1,p1,a2,b2,c2,d2,e2,f2,g2,p2</string>
        </entry>
      </elementAttributes>
      <pos x="1320" y="-120"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1860" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1960" y="0"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>Display_Controller</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>sum_display:8</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>16</int>
        </entry>
        <entry>
          <string>Code</string>
          <string>library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Display_Controller is
    Port (
        sum_display : in STD_LOGIC_VECTOR(7 downto 0);
        -- Saídas para o primeiro display (unidades)
        a1, b1, c1, d1, e1, f1, g1, p1 : out STD_LOGIC;
        -- Saídas para o segundo display (dezenas)
        a2, b2, c2, d2, e2, f2, g2, p2 : out STD_LOGIC
    );
end Display_Controller;

architecture Behavioral of Display_Controller is
    -- Sinais intermediários para armazenar valores decimais
    signal binary_value : integer range 0 to 255;
    signal tens, ones : integer range 0 to 9;
    signal tens_bcd, ones_bcd : STD_LOGIC_VECTOR(3 downto 0);

begin
    -- Converte o valor binário para inteiro
    binary_value &lt;= to_integer(unsigned(sum_display));
    
    -- Calcula dezenas e unidades
    tens &lt;= binary_value / 10;
    ones &lt;= binary_value mod 10;
    
    -- Converte os valores para BCD
    tens_bcd &lt;= std_logic_vector(to_unsigned(tens, 4));
    ones_bcd &lt;= std_logic_vector(to_unsigned(ones, 4));
    
    -- Processo para decodificar o dígito das unidades
    process(ones_bcd)
    begin
        case ones_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;1&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a1 &lt;= &apos;1&apos;; b1 &lt;= &apos;1&apos;; c1 &lt;= &apos;1&apos;; d1 &lt;= &apos;1&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;1&apos;; g1 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a1 &lt;= &apos;0&apos;; b1 &lt;= &apos;0&apos;; c1 &lt;= &apos;0&apos;; d1 &lt;= &apos;0&apos;; e1 &lt;= &apos;0&apos;; f1 &lt;= &apos;0&apos;; g1 &lt;= &apos;0&apos;;
        end case;
    end process;
    
    -- Processo para decodificar o dígito das dezenas
    process(tens_bcd)
    begin
        case tens_bcd is
            when &quot;0000&quot; =&gt; -- 0
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0001&quot; =&gt; -- 1
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;0010&quot; =&gt; -- 2
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0011&quot; =&gt; -- 3
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0100&quot; =&gt; -- 4
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0101&quot; =&gt; -- 5
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0110&quot; =&gt; -- 6
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;0111&quot; =&gt; -- 7
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
            when &quot;1000&quot; =&gt; -- 8
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;1&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when &quot;1001&quot; =&gt; -- 9
                a2 &lt;= &apos;1&apos;; b2 &lt;= &apos;1&apos;; c2 &lt;= &apos;1&apos;; d2 &lt;= &apos;1&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;1&apos;; g2 &lt;= &apos;1&apos;;
            when others =&gt; -- Desativa todos os segmentos
                a2 &lt;= &apos;0&apos;; b2 &lt;= &apos;0&apos;; c2 &lt;= &apos;0&apos;; d2 &lt;= &apos;0&apos;; e2 &lt;= &apos;0&apos;; f2 &lt;= &apos;0&apos;; g2 &lt;= &apos;0&apos;;
        end case;
    end process;
    
end Behavioral;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>a1,b1,c1,d1,e1,f1,g1,p1,a2,b2,c2,d2,e2,f2,g2,p2</string>
        </entry>
      </elementAttributes>
      <pos x="1660" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2200" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="2300" y="500"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="540" y="1280"/>
      <p2 x="740" y="1280"/>
    </wire>
    <wire>
      <p1 x="900" y="640"/>
      <p2 x="1100" y="640"/>
    </wire>
    <wire>
      <p1 x="1200" y="640"/>
      <p2 x="1380" y="640"/>
    </wire>
    <wire>
      <p1 x="1980" y="640"/>
      <p2 x="2020" y="640"/>
    </wire>
    <wire>
      <p1 x="1640" y="0"/>
      <p2 x="1800" y="0"/>
    </wire>
    <wire>
      <p1 x="960" y="260"/>
      <p2 x="1000" y="260"/>
    </wire>
    <wire>
      <p1 x="1680" y="260"/>
      <p2 x="1880" y="260"/>
    </wire>
    <wire>
      <p1 x="1100" y="900"/>
      <p2 x="1260" y="900"/>
    </wire>
    <wire>
      <p1 x="440" y="900"/>
      <p2 x="640" y="900"/>
    </wire>
    <wire>
      <p1 x="1280" y="900"/>
      <p2 x="1300" y="900"/>
    </wire>
    <wire>
      <p1 x="380" y="1160"/>
      <p2 x="440" y="1160"/>
    </wire>
    <wire>
      <p1 x="900" y="520"/>
      <p2 x="1220" y="520"/>
    </wire>
    <wire>
      <p1 x="1260" y="520"/>
      <p2 x="1380" y="520"/>
    </wire>
    <wire>
      <p1 x="1980" y="520"/>
      <p2 x="2120" y="520"/>
    </wire>
    <wire>
      <p1 x="1660" y="-140"/>
      <p2 x="1860" y="-140"/>
    </wire>
    <wire>
      <p1 x="1640" y="140"/>
      <p2 x="1680" y="140"/>
    </wire>
    <wire>
      <p1 x="2040" y="780"/>
      <p2 x="2240" y="780"/>
    </wire>
    <wire>
      <p1 x="500" y="400"/>
      <p2 x="580" y="400"/>
    </wire>
    <wire>
      <p1 x="900" y="400"/>
      <p2 x="1220" y="400"/>
    </wire>
    <wire>
      <p1 x="1980" y="400"/>
      <p2 x="2320" y="400"/>
    </wire>
    <wire>
      <p1 x="380" y="1040"/>
      <p2 x="580" y="1040"/>
    </wire>
    <wire>
      <p1 x="1640" y="-20"/>
      <p2 x="1820" y="-20"/>
    </wire>
    <wire>
      <p1 x="1640" y="20"/>
      <p2 x="1780" y="20"/>
    </wire>
    <wire>
      <p1 x="520" y="1300"/>
      <p2 x="760" y="1300"/>
    </wire>
    <wire>
      <p1 x="900" y="660"/>
      <p2 x="1080" y="660"/>
    </wire>
    <wire>
      <p1 x="2180" y="660"/>
      <p2 x="2300" y="660"/>
    </wire>
    <wire>
      <p1 x="1980" y="660"/>
      <p2 x="2040" y="660"/>
    </wire>
    <wire>
      <p1 x="1700" y="280"/>
      <p2 x="1900" y="280"/>
    </wire>
    <wire>
      <p1 x="2060" y="280"/>
      <p2 x="2260" y="280"/>
    </wire>
    <wire>
      <p1 x="1100" y="920"/>
      <p2 x="1280" y="920"/>
    </wire>
    <wire>
      <p1 x="420" y="920"/>
      <p2 x="620" y="920"/>
    </wire>
    <wire>
      <p1 x="1300" y="920"/>
      <p2 x="1380" y="920"/>
    </wire>
    <wire>
      <p1 x="380" y="1180"/>
      <p2 x="460" y="1180"/>
    </wire>
    <wire>
      <p1 x="900" y="540"/>
      <p2 x="1200" y="540"/>
    </wire>
    <wire>
      <p1 x="1980" y="540"/>
      <p2 x="2000" y="540"/>
    </wire>
    <wire>
      <p1 x="1680" y="-160"/>
      <p2 x="1880" y="-160"/>
    </wire>
    <wire>
      <p1 x="1840" y="160"/>
      <p2 x="1960" y="160"/>
    </wire>
    <wire>
      <p1 x="1640" y="160"/>
      <p2 x="1700" y="160"/>
    </wire>
    <wire>
      <p1 x="1120" y="800"/>
      <p2 x="1380" y="800"/>
    </wire>
    <wire>
      <p1 x="2060" y="800"/>
      <p2 x="2260" y="800"/>
    </wire>
    <wire>
      <p1 x="400" y="420"/>
      <p2 x="460" y="420"/>
    </wire>
    <wire>
      <p1 x="520" y="420"/>
      <p2 x="580" y="420"/>
    </wire>
    <wire>
      <p1 x="1980" y="420"/>
      <p2 x="2340" y="420"/>
    </wire>
    <wire>
      <p1 x="900" y="420"/>
      <p2 x="1640" y="420"/>
    </wire>
    <wire>
      <p1 x="380" y="1060"/>
      <p2 x="560" y="1060"/>
    </wire>
    <wire>
      <p1 x="1640" y="-40"/>
      <p2 x="1840" y="-40"/>
    </wire>
    <wire>
      <p1 x="1640" y="40"/>
      <p2 x="1660" y="40"/>
    </wire>
    <wire>
      <p1 x="400" y="1320"/>
      <p2 x="600" y="1320"/>
    </wire>
    <wire>
      <p1 x="900" y="680"/>
      <p2 x="1060" y="680"/>
    </wire>
    <wire>
      <p1 x="1180" y="680"/>
      <p2 x="1380" y="680"/>
    </wire>
    <wire>
      <p1 x="2160" y="680"/>
      <p2 x="2320" y="680"/>
    </wire>
    <wire>
      <p1 x="1980" y="680"/>
      <p2 x="2060" y="680"/>
    </wire>
    <wire>
      <p1 x="1720" y="300"/>
      <p2 x="1920" y="300"/>
    </wire>
    <wire>
      <p1 x="400" y="300"/>
      <p2 x="580" y="300"/>
    </wire>
    <wire>
      <p1 x="980" y="300"/>
      <p2 x="1000" y="300"/>
    </wire>
    <wire>
      <p1 x="900" y="300"/>
      <p2 x="960" y="300"/>
    </wire>
    <wire>
      <p1 x="1100" y="940"/>
      <p2 x="1300" y="940"/>
    </wire>
    <wire>
      <p1 x="400" y="940"/>
      <p2 x="600" y="940"/>
    </wire>
    <wire>
      <p1 x="400" y="560"/>
      <p2 x="520" y="560"/>
    </wire>
    <wire>
      <p1 x="900" y="560"/>
      <p2 x="1180" y="560"/>
    </wire>
    <wire>
      <p1 x="1240" y="560"/>
      <p2 x="1380" y="560"/>
    </wire>
    <wire>
      <p1 x="1980" y="560"/>
      <p2 x="2020" y="560"/>
    </wire>
    <wire>
      <p1 x="1220" y="1200"/>
      <p2 x="1240" y="1200"/>
    </wire>
    <wire>
      <p1 x="380" y="1200"/>
      <p2 x="400" y="1200"/>
    </wire>
    <wire>
      <p1 x="1700" y="-180"/>
      <p2 x="1900" y="-180"/>
    </wire>
    <wire>
      <p1 x="1820" y="180"/>
      <p2 x="1980" y="180"/>
    </wire>
    <wire>
      <p1 x="1640" y="180"/>
      <p2 x="1720" y="180"/>
    </wire>
    <wire>
      <p1 x="1100" y="820"/>
      <p2 x="1300" y="820"/>
    </wire>
    <wire>
      <p1 x="380" y="1080"/>
      <p2 x="540" y="1080"/>
    </wire>
    <wire>
      <p1 x="900" y="440"/>
      <p2 x="1380" y="440"/>
    </wire>
    <wire>
      <p1 x="1980" y="440"/>
      <p2 x="2360" y="440"/>
    </wire>
    <wire>
      <p1 x="1640" y="-60"/>
      <p2 x="2020" y="-60"/>
    </wire>
    <wire>
      <p1 x="1640" y="60"/>
      <p2 x="1680" y="60"/>
    </wire>
    <wire>
      <p1 x="420" y="1340"/>
      <p2 x="620" y="1340"/>
    </wire>
    <wire>
      <p1 x="2140" y="700"/>
      <p2 x="2340" y="700"/>
    </wire>
    <wire>
      <p1 x="420" y="320"/>
      <p2 x="580" y="320"/>
    </wire>
    <wire>
      <p1 x="900" y="320"/>
      <p2 x="980" y="320"/>
    </wire>
    <wire>
      <p1 x="2040" y="320"/>
      <p2 x="2240" y="320"/>
    </wire>
    <wire>
      <p1 x="1100" y="960"/>
      <p2 x="1220" y="960"/>
    </wire>
    <wire>
      <p1 x="20" y="960"/>
      <p2 x="60" y="960"/>
    </wire>
    <wire>
      <p1 x="380" y="960"/>
      <p2 x="700" y="960"/>
    </wire>
    <wire>
      <p1 x="1200" y="1220"/>
      <p2 x="1260" y="1220"/>
    </wire>
    <wire>
      <p1 x="380" y="1220"/>
      <p2 x="420" y="1220"/>
    </wire>
    <wire>
      <p1 x="900" y="580"/>
      <p2 x="1160" y="580"/>
    </wire>
    <wire>
      <p1 x="1980" y="580"/>
      <p2 x="2040" y="580"/>
    </wire>
    <wire>
      <p1 x="1800" y="200"/>
      <p2 x="2000" y="200"/>
    </wire>
    <wire>
      <p1 x="1080" y="840"/>
      <p2 x="1280" y="840"/>
    </wire>
    <wire>
      <p1 x="1300" y="840"/>
      <p2 x="1380" y="840"/>
    </wire>
    <wire>
      <p1 x="400" y="460"/>
      <p2 x="480" y="460"/>
    </wire>
    <wire>
      <p1 x="900" y="460"/>
      <p2 x="1280" y="460"/>
    </wire>
    <wire>
      <p1 x="1980" y="460"/>
      <p2 x="2180" y="460"/>
    </wire>
    <wire>
      <p1 x="380" y="1100"/>
      <p2 x="520" y="1100"/>
    </wire>
    <wire>
      <p1 x="1640" y="-80"/>
      <p2 x="2000" y="-80"/>
    </wire>
    <wire>
      <p1 x="1640" y="80"/>
      <p2 x="1700" y="80"/>
    </wire>
    <wire>
      <p1 x="440" y="1360"/>
      <p2 x="640" y="1360"/>
    </wire>
    <wire>
      <p1 x="1160" y="720"/>
      <p2 x="1380" y="720"/>
    </wire>
    <wire>
      <p1 x="2120" y="720"/>
      <p2 x="2360" y="720"/>
    </wire>
    <wire>
      <p1 x="400" y="340"/>
      <p2 x="420" y="340"/>
    </wire>
    <wire>
      <p1 x="440" y="340"/>
      <p2 x="580" y="340"/>
    </wire>
    <wire>
      <p1 x="900" y="340"/>
      <p2 x="1000" y="340"/>
    </wire>
    <wire>
      <p1 x="2020" y="340"/>
      <p2 x="2220" y="340"/>
    </wire>
    <wire>
      <p1 x="1100" y="980"/>
      <p2 x="1200" y="980"/>
    </wire>
    <wire>
      <p1 x="380" y="980"/>
      <p2 x="720" y="980"/>
    </wire>
    <wire>
      <p1 x="1180" y="1240"/>
      <p2 x="1280" y="1240"/>
    </wire>
    <wire>
      <p1 x="580" y="1240"/>
      <p2 x="700" y="1240"/>
    </wire>
    <wire>
      <p1 x="380" y="1240"/>
      <p2 x="440" y="1240"/>
    </wire>
    <wire>
      <p1 x="900" y="600"/>
      <p2 x="1140" y="600"/>
    </wire>
    <wire>
      <p1 x="1220" y="600"/>
      <p2 x="1380" y="600"/>
    </wire>
    <wire>
      <p1 x="1980" y="600"/>
      <p2 x="2060" y="600"/>
    </wire>
    <wire>
      <p1 x="1720" y="-220"/>
      <p2 x="1920" y="-220"/>
    </wire>
    <wire>
      <p1 x="1780" y="220"/>
      <p2 x="2020" y="220"/>
    </wire>
    <wire>
      <p1 x="20" y="220"/>
      <p2 x="1200" y="220"/>
    </wire>
    <wire>
      <p1 x="460" y="860"/>
      <p2 x="660" y="860"/>
    </wire>
    <wire>
      <p1 x="1060" y="860"/>
      <p2 x="1260" y="860"/>
    </wire>
    <wire>
      <p1 x="1280" y="860"/>
      <p2 x="1300" y="860"/>
    </wire>
    <wire>
      <p1 x="380" y="1120"/>
      <p2 x="400" y="1120"/>
    </wire>
    <wire>
      <p1 x="900" y="480"/>
      <p2 x="1260" y="480"/>
    </wire>
    <wire>
      <p1 x="1280" y="480"/>
      <p2 x="1380" y="480"/>
    </wire>
    <wire>
      <p1 x="1980" y="480"/>
      <p2 x="2160" y="480"/>
    </wire>
    <wire>
      <p1 x="1640" y="-100"/>
      <p2 x="1980" y="-100"/>
    </wire>
    <wire>
      <p1 x="1640" y="100"/>
      <p2 x="1720" y="100"/>
    </wire>
    <wire>
      <p1 x="460" y="1380"/>
      <p2 x="660" y="1380"/>
    </wire>
    <wire>
      <p1 x="2000" y="740"/>
      <p2 x="2200" y="740"/>
    </wire>
    <wire>
      <p1 x="460" y="360"/>
      <p2 x="580" y="360"/>
    </wire>
    <wire>
      <p1 x="900" y="360"/>
      <p2 x="1180" y="360"/>
    </wire>
    <wire>
      <p1 x="2000" y="360"/>
      <p2 x="2200" y="360"/>
    </wire>
    <wire>
      <p1 x="1100" y="1000"/>
      <p2 x="1180" y="1000"/>
    </wire>
    <wire>
      <p1 x="380" y="1000"/>
      <p2 x="740" y="1000"/>
    </wire>
    <wire>
      <p1 x="1160" y="1260"/>
      <p2 x="1300" y="1260"/>
    </wire>
    <wire>
      <p1 x="560" y="1260"/>
      <p2 x="720" y="1260"/>
    </wire>
    <wire>
      <p1 x="380" y="1260"/>
      <p2 x="460" y="1260"/>
    </wire>
    <wire>
      <p1 x="900" y="620"/>
      <p2 x="1120" y="620"/>
    </wire>
    <wire>
      <p1 x="1980" y="620"/>
      <p2 x="2000" y="620"/>
    </wire>
    <wire>
      <p1 x="1660" y="240"/>
      <p2 x="1860" y="240"/>
    </wire>
    <wire>
      <p1 x="180" y="240"/>
      <p2 x="1180" y="240"/>
    </wire>
    <wire>
      <p1 x="180" y="880"/>
      <p2 x="780" y="880"/>
    </wire>
    <wire>
      <p1 x="1100" y="880"/>
      <p2 x="1240" y="880"/>
    </wire>
    <wire>
      <p1 x="1260" y="880"/>
      <p2 x="1280" y="880"/>
    </wire>
    <wire>
      <p1 x="1300" y="880"/>
      <p2 x="1380" y="880"/>
    </wire>
    <wire>
      <p1 x="400" y="500"/>
      <p2 x="500" y="500"/>
    </wire>
    <wire>
      <p1 x="900" y="500"/>
      <p2 x="1240" y="500"/>
    </wire>
    <wire>
      <p1 x="1980" y="500"/>
      <p2 x="2140" y="500"/>
    </wire>
    <wire>
      <p1 x="380" y="1140"/>
      <p2 x="420" y="1140"/>
    </wire>
    <wire>
      <p1 x="1640" y="-120"/>
      <p2 x="1960" y="-120"/>
    </wire>
    <wire>
      <p1 x="1220" y="-120"/>
      <p2 x="1320" y="-120"/>
    </wire>
    <wire>
      <p1 x="1640" y="120"/>
      <p2 x="1660" y="120"/>
    </wire>
    <wire>
      <p1 x="1140" y="760"/>
      <p2 x="1380" y="760"/>
    </wire>
    <wire>
      <p1 x="2020" y="760"/>
      <p2 x="2220" y="760"/>
    </wire>
    <wire>
      <p1 x="400" y="380"/>
      <p2 x="440" y="380"/>
    </wire>
    <wire>
      <p1 x="480" y="380"/>
      <p2 x="580" y="380"/>
    </wire>
    <wire>
      <p1 x="900" y="380"/>
      <p2 x="1200" y="380"/>
    </wire>
    <wire>
      <p1 x="1980" y="380"/>
      <p2 x="2300" y="380"/>
    </wire>
    <wire>
      <p1 x="1640" y="380"/>
      <p2 x="1660" y="380"/>
    </wire>
    <wire>
      <p1 x="1100" y="1020"/>
      <p2 x="1160" y="1020"/>
    </wire>
    <wire>
      <p1 x="380" y="1020"/>
      <p2 x="760" y="1020"/>
    </wire>
    <wire>
      <p1 x="1280" y="920"/>
      <p2 x="1280" y="1040"/>
    </wire>
    <wire>
      <p1 x="1280" y="1180"/>
      <p2 x="1280" y="1240"/>
    </wire>
    <wire>
      <p1 x="1280" y="880"/>
      <p2 x="1280" y="900"/>
    </wire>
    <wire>
      <p1 x="1280" y="840"/>
      <p2 x="1280" y="860"/>
    </wire>
    <wire>
      <p1 x="1280" y="460"/>
      <p2 x="1280" y="480"/>
    </wire>
    <wire>
      <p1 x="640" y="900"/>
      <p2 x="640" y="1080"/>
    </wire>
    <wire>
      <p1 x="640" y="1220"/>
      <p2 x="640" y="1360"/>
    </wire>
    <wire>
      <p1 x="1920" y="-220"/>
      <p2 x="1920" y="0"/>
    </wire>
    <wire>
      <p1 x="1920" y="140"/>
      <p2 x="1920" y="300"/>
    </wire>
    <wire>
      <p1 x="2180" y="460"/>
      <p2 x="2180" y="660"/>
    </wire>
    <wire>
      <p1 x="520" y="420"/>
      <p2 x="520" y="560"/>
    </wire>
    <wire>
      <p1 x="520" y="1100"/>
      <p2 x="520" y="1300"/>
    </wire>
    <wire>
      <p1 x="1160" y="1020"/>
      <p2 x="1160" y="1260"/>
    </wire>
    <wire>
      <p1 x="1160" y="580"/>
      <p2 x="1160" y="720"/>
    </wire>
    <wire>
      <p1 x="1800" y="0"/>
      <p2 x="1800" y="200"/>
    </wire>
    <wire>
      <p1 x="2060" y="280"/>
      <p2 x="2060" y="600"/>
    </wire>
    <wire>
      <p1 x="2060" y="680"/>
      <p2 x="2060" y="800"/>
    </wire>
    <wire>
      <p1 x="400" y="940"/>
      <p2 x="400" y="1120"/>
    </wire>
    <wire>
      <p1 x="400" y="1200"/>
      <p2 x="400" y="1320"/>
    </wire>
    <wire>
      <p1 x="1680" y="-160"/>
      <p2 x="1680" y="60"/>
    </wire>
    <wire>
      <p1 x="1680" y="140"/>
      <p2 x="1680" y="260"/>
    </wire>
    <wire>
      <p1 x="2320" y="400"/>
      <p2 x="2320" y="500"/>
    </wire>
    <wire>
      <p1 x="2320" y="640"/>
      <p2 x="2320" y="680"/>
    </wire>
    <wire>
      <p1 x="1300" y="940"/>
      <p2 x="1300" y="1040"/>
    </wire>
    <wire>
      <p1 x="1300" y="1180"/>
      <p2 x="1300" y="1260"/>
    </wire>
    <wire>
      <p1 x="1300" y="900"/>
      <p2 x="1300" y="920"/>
    </wire>
    <wire>
      <p1 x="1300" y="860"/>
      <p2 x="1300" y="880"/>
    </wire>
    <wire>
      <p1 x="1300" y="820"/>
      <p2 x="1300" y="840"/>
    </wire>
    <wire>
      <p1 x="20" y="220"/>
      <p2 x="20" y="960"/>
    </wire>
    <wire>
      <p1 x="660" y="860"/>
      <p2 x="660" y="1080"/>
    </wire>
    <wire>
      <p1 x="660" y="1220"/>
      <p2 x="660" y="1380"/>
    </wire>
    <wire>
      <p1 x="2200" y="360"/>
      <p2 x="2200" y="500"/>
    </wire>
    <wire>
      <p1 x="2200" y="640"/>
      <p2 x="2200" y="740"/>
    </wire>
    <wire>
      <p1 x="1180" y="240"/>
      <p2 x="1180" y="360"/>
    </wire>
    <wire>
      <p1 x="1180" y="1000"/>
      <p2 x="1180" y="1240"/>
    </wire>
    <wire>
      <p1 x="1180" y="560"/>
      <p2 x="1180" y="680"/>
    </wire>
    <wire>
      <p1 x="540" y="1080"/>
      <p2 x="540" y="1280"/>
    </wire>
    <wire>
      <p1 x="1820" y="-20"/>
      <p2 x="1820" y="180"/>
    </wire>
    <wire>
      <p1 x="420" y="320"/>
      <p2 x="420" y="340"/>
    </wire>
    <wire>
      <p1 x="420" y="920"/>
      <p2 x="420" y="1140"/>
    </wire>
    <wire>
      <p1 x="420" y="1220"/>
      <p2 x="420" y="1340"/>
    </wire>
    <wire>
      <p1 x="1060" y="680"/>
      <p2 x="1060" y="860"/>
    </wire>
    <wire>
      <p1 x="1700" y="-180"/>
      <p2 x="1700" y="80"/>
    </wire>
    <wire>
      <p1 x="1700" y="160"/>
      <p2 x="1700" y="280"/>
    </wire>
    <wire>
      <p1 x="2340" y="420"/>
      <p2 x="2340" y="500"/>
    </wire>
    <wire>
      <p1 x="2340" y="640"/>
      <p2 x="2340" y="700"/>
    </wire>
    <wire>
      <p1 x="1960" y="-120"/>
      <p2 x="1960" y="0"/>
    </wire>
    <wire>
      <p1 x="1960" y="140"/>
      <p2 x="1960" y="160"/>
    </wire>
    <wire>
      <p1 x="2220" y="340"/>
      <p2 x="2220" y="500"/>
    </wire>
    <wire>
      <p1 x="2220" y="640"/>
      <p2 x="2220" y="760"/>
    </wire>
    <wire>
      <p1 x="1200" y="980"/>
      <p2 x="1200" y="1220"/>
    </wire>
    <wire>
      <p1 x="1200" y="220"/>
      <p2 x="1200" y="380"/>
    </wire>
    <wire>
      <p1 x="1200" y="540"/>
      <p2 x="1200" y="640"/>
    </wire>
    <wire>
      <p1 x="560" y="1060"/>
      <p2 x="560" y="1260"/>
    </wire>
    <wire>
      <p1 x="1840" y="-40"/>
      <p2 x="1840" y="160"/>
    </wire>
    <wire>
      <p1 x="180" y="240"/>
      <p2 x="180" y="880"/>
    </wire>
    <wire>
      <p1 x="440" y="340"/>
      <p2 x="440" y="380"/>
    </wire>
    <wire>
      <p1 x="440" y="900"/>
      <p2 x="440" y="1160"/>
    </wire>
    <wire>
      <p1 x="440" y="1240"/>
      <p2 x="440" y="1360"/>
    </wire>
    <wire>
      <p1 x="1080" y="660"/>
      <p2 x="1080" y="840"/>
    </wire>
    <wire>
      <p1 x="1720" y="-220"/>
      <p2 x="1720" y="100"/>
    </wire>
    <wire>
      <p1 x="1720" y="180"/>
      <p2 x="1720" y="300"/>
    </wire>
    <wire>
      <p1 x="2360" y="440"/>
      <p2 x="2360" y="500"/>
    </wire>
    <wire>
      <p1 x="2360" y="640"/>
      <p2 x="2360" y="720"/>
    </wire>
    <wire>
      <p1 x="700" y="960"/>
      <p2 x="700" y="1080"/>
    </wire>
    <wire>
      <p1 x="700" y="1220"/>
      <p2 x="700" y="1240"/>
    </wire>
    <wire>
      <p1 x="1980" y="-100"/>
      <p2 x="1980" y="0"/>
    </wire>
    <wire>
      <p1 x="1980" y="140"/>
      <p2 x="1980" y="180"/>
    </wire>
    <wire>
      <p1 x="960" y="260"/>
      <p2 x="960" y="300"/>
    </wire>
    <wire>
      <p1 x="2240" y="320"/>
      <p2 x="2240" y="500"/>
    </wire>
    <wire>
      <p1 x="2240" y="640"/>
      <p2 x="2240" y="780"/>
    </wire>
    <wire>
      <p1 x="1860" y="-140"/>
      <p2 x="1860" y="0"/>
    </wire>
    <wire>
      <p1 x="1860" y="140"/>
      <p2 x="1860" y="240"/>
    </wire>
    <wire>
      <p1 x="1220" y="960"/>
      <p2 x="1220" y="1200"/>
    </wire>
    <wire>
      <p1 x="1220" y="520"/>
      <p2 x="1220" y="600"/>
    </wire>
    <wire>
      <p1 x="1220" y="-120"/>
      <p2 x="1220" y="400"/>
    </wire>
    <wire>
      <p1 x="580" y="1040"/>
      <p2 x="580" y="1240"/>
    </wire>
    <wire>
      <p1 x="2120" y="520"/>
      <p2 x="2120" y="720"/>
    </wire>
    <wire>
      <p1 x="460" y="360"/>
      <p2 x="460" y="420"/>
    </wire>
    <wire>
      <p1 x="460" y="860"/>
      <p2 x="460" y="1180"/>
    </wire>
    <wire>
      <p1 x="460" y="1260"/>
      <p2 x="460" y="1380"/>
    </wire>
    <wire>
      <p1 x="1100" y="640"/>
      <p2 x="1100" y="820"/>
    </wire>
    <wire>
      <p1 x="2000" y="-80"/>
      <p2 x="2000" y="0"/>
    </wire>
    <wire>
      <p1 x="2000" y="140"/>
      <p2 x="2000" y="200"/>
    </wire>
    <wire>
      <p1 x="2000" y="360"/>
      <p2 x="2000" y="540"/>
    </wire>
    <wire>
      <p1 x="2000" y="620"/>
      <p2 x="2000" y="740"/>
    </wire>
    <wire>
      <p1 x="720" y="980"/>
      <p2 x="720" y="1080"/>
    </wire>
    <wire>
      <p1 x="720" y="1220"/>
      <p2 x="720" y="1260"/>
    </wire>
    <wire>
      <p1 x="980" y="300"/>
      <p2 x="980" y="320"/>
    </wire>
    <wire>
      <p1 x="2260" y="280"/>
      <p2 x="2260" y="500"/>
    </wire>
    <wire>
      <p1 x="2260" y="640"/>
      <p2 x="2260" y="800"/>
    </wire>
    <wire>
      <p1 x="1880" y="-160"/>
      <p2 x="1880" y="0"/>
    </wire>
    <wire>
      <p1 x="1880" y="140"/>
      <p2 x="1880" y="260"/>
    </wire>
    <wire>
      <p1 x="1240" y="1180"/>
      <p2 x="1240" y="1200"/>
    </wire>
    <wire>
      <p1 x="1240" y="880"/>
      <p2 x="1240" y="1040"/>
    </wire>
    <wire>
      <p1 x="1240" y="500"/>
      <p2 x="1240" y="560"/>
    </wire>
    <wire>
      <p1 x="600" y="940"/>
      <p2 x="600" y="1080"/>
    </wire>
    <wire>
      <p1 x="600" y="1220"/>
      <p2 x="600" y="1320"/>
    </wire>
    <wire>
      <p1 x="2140" y="500"/>
      <p2 x="2140" y="700"/>
    </wire>
    <wire>
      <p1 x="480" y="380"/>
      <p2 x="480" y="460"/>
    </wire>
    <wire>
      <p1 x="1120" y="620"/>
      <p2 x="1120" y="800"/>
    </wire>
    <wire>
      <p1 x="2020" y="-60"/>
      <p2 x="2020" y="0"/>
    </wire>
    <wire>
      <p1 x="2020" y="140"/>
      <p2 x="2020" y="220"/>
    </wire>
    <wire>
      <p1 x="2020" y="340"/>
      <p2 x="2020" y="560"/>
    </wire>
    <wire>
      <p1 x="2020" y="640"/>
      <p2 x="2020" y="760"/>
    </wire>
    <wire>
      <p1 x="740" y="1000"/>
      <p2 x="740" y="1080"/>
    </wire>
    <wire>
      <p1 x="740" y="1220"/>
      <p2 x="740" y="1280"/>
    </wire>
    <wire>
      <p1 x="1640" y="380"/>
      <p2 x="1640" y="420"/>
    </wire>
    <wire>
      <p1 x="1900" y="-180"/>
      <p2 x="1900" y="0"/>
    </wire>
    <wire>
      <p1 x="1900" y="140"/>
      <p2 x="1900" y="280"/>
    </wire>
    <wire>
      <p1 x="1260" y="900"/>
      <p2 x="1260" y="1040"/>
    </wire>
    <wire>
      <p1 x="1260" y="1180"/>
      <p2 x="1260" y="1220"/>
    </wire>
    <wire>
      <p1 x="1260" y="860"/>
      <p2 x="1260" y="880"/>
    </wire>
    <wire>
      <p1 x="1260" y="480"/>
      <p2 x="1260" y="520"/>
    </wire>
    <wire>
      <p1 x="620" y="920"/>
      <p2 x="620" y="1080"/>
    </wire>
    <wire>
      <p1 x="620" y="1220"/>
      <p2 x="620" y="1340"/>
    </wire>
    <wire>
      <p1 x="2160" y="480"/>
      <p2 x="2160" y="680"/>
    </wire>
    <wire>
      <p1 x="1780" y="20"/>
      <p2 x="1780" y="220"/>
    </wire>
    <wire>
      <p1 x="500" y="400"/>
      <p2 x="500" y="500"/>
    </wire>
    <wire>
      <p1 x="1140" y="600"/>
      <p2 x="1140" y="760"/>
    </wire>
    <wire>
      <p1 x="760" y="1020"/>
      <p2 x="760" y="1080"/>
    </wire>
    <wire>
      <p1 x="760" y="1220"/>
      <p2 x="760" y="1300"/>
    </wire>
    <wire>
      <p1 x="2040" y="320"/>
      <p2 x="2040" y="580"/>
    </wire>
    <wire>
      <p1 x="2040" y="660"/>
      <p2 x="2040" y="780"/>
    </wire>
    <wire>
      <p1 x="1660" y="-140"/>
      <p2 x="1660" y="40"/>
    </wire>
    <wire>
      <p1 x="1660" y="120"/>
      <p2 x="1660" y="240"/>
    </wire>
    <wire>
      <p1 x="2300" y="380"/>
      <p2 x="2300" y="500"/>
    </wire>
    <wire>
      <p1 x="2300" y="640"/>
      <p2 x="2300" y="660"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>